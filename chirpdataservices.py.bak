from enums import *
from utilities import Verification
from event import Event
from datetime import datetime, timedelta
import mysql.connector
import json

def create_connection():
    with open("configsettings.json", 'r') as config_file:
        config_settings= json.loads(config_file.read())
    cnx = mysql.connector.connect(user=config_settings['user'], password=config_settings['password'], 
    host=config_settings['host'], database=config_settings['database'], port=config_settings['port'])

    return cnx

def create_user(user):
    userCnx = create_connection()
    
    cursor = userCnx.cursor()
    
    reliability_score = 100 # need to sub this out
    create_user = "INSERT INTO Users (username, reliability_score, base_latitude, base_longitude, preferences) \
        VALUES (\'" + user.name + "\'," + str(reliability_score) + "," + str(user.baseLocation[0]) \
            + "," + str(user.baseLocation[1]) + "," + str(user.preferences) + ");"

    cursor.execute(create_user)
    
    userCnx.commit()
    userCnx.close()

    return  "User " + str(user) + " created successfully."

def create_event(event):
    eventCnx = create_connection()
    cursor = eventCnx.cursor()
    
    create_event = "INSERT INTO Events (weatherType, description, latitude, longitude, timestamp) \
        VALUES (" + str(event.weatherType.value) + ",\'" + event.description + "\',"  + str(event.location[0]) + "," + str(event.location[1]) + ",\'"  + event.time + "\');"

    print(create_event)
    cursor.execute(create_event)
    
    eventCnx.commit()
    eventCnx.close()
   
    return  "Event " + str(event) + " created successfully."

def get_events():
    eventCnx = create_connection()
    cursor = eventCnx.cursor()
    
    last_hour_timestamp = str(datetime.now() - timedelta(hours=1))[:-7] # slicing removes milliseconds

    get_event = "SELECT * FROM Events WHERE timestamp >= " + "\'" + last_hour_timestamp + "\;'"
    print(get_event)
    cursor.execute(get_event)

    events = dict()
    for (event_id, weatherType, description, latitude, longitude, timestamp) in cursor:
        newEvent = Event(event_id, weatherType, description, [latitude, longitude], timestamp)
        events[event_id] = newEvent
    
    eventCnx.close()
    
    return events

<<<<<<< Updated upstream
def create_verification(event_id, user_id, verified):
    verificationCnx = create_connection()
    cursor = verificationCnx.cursor()

    create_verification = "INSERT INTO Verifications (event_id, user_id, verified) VALUES (" + str(event_id) + ", " \
        + str(user_id) + ", " +  str(verified) + ");"
    
    cursor.execute(create_verification)
    
    verificationCnx.commit()
    verificationCnx.close()
=======
def create_verification(eventId, userNumber, verification):
    return 1

def getVerificationsForEvent(event):
    return [Verification(2156927557, True)]

def get_nums_for_event(event):
    return [2156927557]

>>>>>>> Stashed changes

    return "Verification for event " + str(event_id) + " created successfully"

create_verification(2000000, 1000004, False)